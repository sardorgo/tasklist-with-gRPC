// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package student_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentsClient is the client API for Students service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentsClient interface {
	CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*Student, error)
	UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*Student, error)
	DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*Empty, error)
	GetStudentById(ctx context.Context, in *GetStudentByIdRequest, opts ...grpc.CallOption) (*Student, error)
	GetAllStudents(ctx context.Context, in *GetAllStudentsRequest, opts ...grpc.CallOption) (*GetAllStudentsResponse, error)
	CreateTaskController(ctx context.Context, in *CreateTaskControllerRequest, opts ...grpc.CallOption) (*Empty, error)
	GetStudentTask(ctx context.Context, in *GetStudentsTasksRequest, opts ...grpc.CallOption) (*GetStudentsTasksResponse, error)
	ListAllUsersTasks(ctx context.Context, in *ListAllUsersTasksRequest, opts ...grpc.CallOption) (*ListAllUsersTasksResponse, error)
}

type studentsClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentsClient(cc grpc.ClientConnInterface) StudentsClient {
	return &studentsClient{cc}
}

func (c *studentsClient) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/student_proto.Students/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsClient) UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/student_proto.Students/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsClient) DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/student_proto.Students/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsClient) GetStudentById(ctx context.Context, in *GetStudentByIdRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/student_proto.Students/GetStudentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsClient) GetAllStudents(ctx context.Context, in *GetAllStudentsRequest, opts ...grpc.CallOption) (*GetAllStudentsResponse, error) {
	out := new(GetAllStudentsResponse)
	err := c.cc.Invoke(ctx, "/student_proto.Students/GetAllStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsClient) CreateTaskController(ctx context.Context, in *CreateTaskControllerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/student_proto.Students/CreateTaskController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsClient) GetStudentTask(ctx context.Context, in *GetStudentsTasksRequest, opts ...grpc.CallOption) (*GetStudentsTasksResponse, error) {
	out := new(GetStudentsTasksResponse)
	err := c.cc.Invoke(ctx, "/student_proto.Students/GetStudentTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsClient) ListAllUsersTasks(ctx context.Context, in *ListAllUsersTasksRequest, opts ...grpc.CallOption) (*ListAllUsersTasksResponse, error) {
	out := new(ListAllUsersTasksResponse)
	err := c.cc.Invoke(ctx, "/student_proto.Students/ListAllUsersTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentsServer is the server API for Students service.
// All implementations must embed UnimplementedStudentsServer
// for forward compatibility
type StudentsServer interface {
	CreateStudent(context.Context, *CreateStudentRequest) (*Student, error)
	UpdateStudent(context.Context, *UpdateStudentRequest) (*Student, error)
	DeleteStudent(context.Context, *DeleteStudentRequest) (*Empty, error)
	GetStudentById(context.Context, *GetStudentByIdRequest) (*Student, error)
	GetAllStudents(context.Context, *GetAllStudentsRequest) (*GetAllStudentsResponse, error)
	CreateTaskController(context.Context, *CreateTaskControllerRequest) (*Empty, error)
	GetStudentTask(context.Context, *GetStudentsTasksRequest) (*GetStudentsTasksResponse, error)
	ListAllUsersTasks(context.Context, *ListAllUsersTasksRequest) (*ListAllUsersTasksResponse, error)
	mustEmbedUnimplementedStudentsServer()
}

// UnimplementedStudentsServer must be embedded to have forward compatible implementations.
type UnimplementedStudentsServer struct {
}

func (UnimplementedStudentsServer) CreateStudent(context.Context, *CreateStudentRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedStudentsServer) UpdateStudent(context.Context, *UpdateStudentRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedStudentsServer) DeleteStudent(context.Context, *DeleteStudentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedStudentsServer) GetStudentById(context.Context, *GetStudentByIdRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentById not implemented")
}
func (UnimplementedStudentsServer) GetAllStudents(context.Context, *GetAllStudentsRequest) (*GetAllStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudents not implemented")
}
func (UnimplementedStudentsServer) CreateTaskController(context.Context, *CreateTaskControllerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskController not implemented")
}
func (UnimplementedStudentsServer) GetStudentTask(context.Context, *GetStudentsTasksRequest) (*GetStudentsTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentTask not implemented")
}
func (UnimplementedStudentsServer) ListAllUsersTasks(context.Context, *ListAllUsersTasksRequest) (*ListAllUsersTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllUsersTasks not implemented")
}
func (UnimplementedStudentsServer) mustEmbedUnimplementedStudentsServer() {}

// UnsafeStudentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentsServer will
// result in compilation errors.
type UnsafeStudentsServer interface {
	mustEmbedUnimplementedStudentsServer()
}

func RegisterStudentsServer(s grpc.ServiceRegistrar, srv StudentsServer) {
	s.RegisterService(&Students_ServiceDesc, srv)
}

func _Students_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_proto.Students/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServer).CreateStudent(ctx, req.(*CreateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Students_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_proto.Students/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServer).UpdateStudent(ctx, req.(*UpdateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Students_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_proto.Students/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServer).DeleteStudent(ctx, req.(*DeleteStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Students_GetStudentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServer).GetStudentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_proto.Students/GetStudentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServer).GetStudentById(ctx, req.(*GetStudentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Students_GetAllStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServer).GetAllStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_proto.Students/GetAllStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServer).GetAllStudents(ctx, req.(*GetAllStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Students_CreateTaskController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServer).CreateTaskController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_proto.Students/CreateTaskController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServer).CreateTaskController(ctx, req.(*CreateTaskControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Students_GetStudentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServer).GetStudentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_proto.Students/GetStudentTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServer).GetStudentTask(ctx, req.(*GetStudentsTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Students_ListAllUsersTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllUsersTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServer).ListAllUsersTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_proto.Students/ListAllUsersTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServer).ListAllUsersTasks(ctx, req.(*ListAllUsersTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Students_ServiceDesc is the grpc.ServiceDesc for Students service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Students_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student_proto.Students",
	HandlerType: (*StudentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudent",
			Handler:    _Students_CreateStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _Students_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _Students_DeleteStudent_Handler,
		},
		{
			MethodName: "GetStudentById",
			Handler:    _Students_GetStudentById_Handler,
		},
		{
			MethodName: "GetAllStudents",
			Handler:    _Students_GetAllStudents_Handler,
		},
		{
			MethodName: "CreateTaskController",
			Handler:    _Students_CreateTaskController_Handler,
		},
		{
			MethodName: "GetStudentTask",
			Handler:    _Students_GetStudentTask_Handler,
		},
		{
			MethodName: "ListAllUsersTasks",
			Handler:    _Students_ListAllUsersTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student.proto",
}
